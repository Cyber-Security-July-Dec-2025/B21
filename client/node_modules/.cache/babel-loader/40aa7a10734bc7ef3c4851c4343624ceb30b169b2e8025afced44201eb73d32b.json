{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\new\\\\secure-file-vault\\\\client\\\\src\\\\components\\\\EncryptForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { generateAESKey, exportAESRaw, importRSAPublicKeyHex, rsaEncrypt, sha256, aesGcmEncrypt, arrayBufferToHex, arrayBufferToBase64, hexToArrayBuffer } from '../utils/crypto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EncryptForm() {\n  _s();\n  const [publicKeyHex, setPublicKeyHex] = useState(localStorage.getItem('publicKeyHex') || '');\n  const [fileName, setFileName] = useState('');\n  const [status, setStatus] = useState('');\n  const fileInputRef = useRef();\n  const handleSavePublic = () => {\n    localStorage.setItem('publicKeyHex', publicKeyHex);\n    setStatus('Saved public key to localStorage (only public key).');\n  };\n  async function handleEncryptAndUpload(e) {\n    e.preventDefault();\n    setStatus('Processing...');\n    try {\n      const file = fileInputRef.current.files[0];\n      if (!file) {\n        setStatus('No file selected');\n        return;\n      }\n      if (!publicKeyHex) {\n        setStatus('Provide public key HEX');\n        return;\n      }\n      setFileName(file.name);\n      const arrayBuffer = await file.arrayBuffer();\n\n      // 1) compute SHA-256 digest of the file\n      const digest = await sha256(arrayBuffer);\n\n      // 2) create payload = file bytes || digest (concatenate)\n      const fileBytes = new Uint8Array(arrayBuffer);\n      const digestBytes = new Uint8Array(digest);\n      const payload = new Uint8Array(fileBytes.length + digestBytes.length);\n      payload.set(fileBytes, 0);\n      payload.set(digestBytes, fileBytes.length);\n\n      // 3) generate AES-256-GCM key\n      const aesKey = await generateAESKey();\n      const aesRaw = await exportAESRaw(aesKey);\n\n      // 4) AES-GCM encrypt the payload\n      const {\n        ciphertext,\n        iv\n      } = await aesGcmEncrypt(aesKey, payload.buffer);\n\n      // 5) import RSA public key (user provided HEX)\n      const pub = await importRSAPublicKeyHex(publicKeyHex);\n\n      // 6) encrypt raw AES key with RSA-OAEP\n      const encryptedAES = await rsaEncrypt(pub, aesRaw);\n\n      // 7) prepare upload: file blob (ciphertext) and metadata\n      const ciphertextBase64 = arrayBufferToBase64(ciphertext);\n      const encryptedAESHex = arrayBufferToHex(encryptedAES);\n      const ivHex = arrayBufferToHex(iv.buffer);\n      const fileHashHex = arrayBufferToHex(digest.buffer);\n\n      // send to server as multipart/form-data\n      // convert base64 ciphertext to Blob\n      const binary = atob(ciphertextBase64);\n      const len = binary.length;\n      const u8 = new Uint8Array(len);\n      for (let i = 0; i < len; i++) u8[i] = binary.charCodeAt(i);\n      const blob = new Blob([u8], {\n        type: 'application/octet-stream'\n      });\n      const formData = new FormData();\n      formData.append('file', blob, `${file.name}.enc`);\n      const metadata = {\n        filename: `${file.name}.enc`,\n        originalFilename: file.name,\n        encryptedAESKeyHex: encryptedAESHex,\n        ivHex,\n        fileHashHex\n      };\n      formData.append('metadata', JSON.stringify(metadata));\n\n      // POST to server (assumes server at localhost:4000)\n      setStatus('Uploading encrypted blob to server...');\n      const resp = await fetch('http://localhost:4000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const j = await resp.json();\n      if (!resp.ok) throw new Error(j.error || 'Upload failed');\n      setStatus(`Upload success â€” file id: ${j.id}`);\n    } catch (err) {\n      console.error(err);\n      setStatus('Error: ' + err.message);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: '1px solid #ddd',\n      padding: 16,\n      borderRadius: 8\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Encrypt & Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Paste recipient's RSA public key (HEX of SPKI DER). You may save the public key to localStorage.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: 4,\n      value: publicKeyHex,\n      onChange: e => setPublicKeyHex(e.target.value.trim()),\n      placeholder: \"Paste public key HEX (SPKI DER) here\",\n      style: {\n        width: '100%',\n        fontFamily: 'monospace'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSavePublic,\n        children: \"Save Public Key (localStorage)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleEncryptAndUpload,\n      style: {\n        marginTop: 12\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: fileInputRef,\n        type: \"file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 8\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Encrypt & Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 12\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), \" \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8,\n        fontSize: 13,\n        color: '#555'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Important:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Private key must never be saved to server or localStorage.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"The server only stores the encrypted file blob and metadata (including the RSA-encrypted AES key in HEX).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"When you want to decrypt, provide the private key HEX in the Decrypt section.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(EncryptForm, \"eyX7C6ZYm1MgsjpKIpG2TEJIvu4=\");\n_c = EncryptForm;\nvar _c;\n$RefreshReg$(_c, \"EncryptForm\");","map":{"version":3,"names":["React","useState","useRef","generateAESKey","exportAESRaw","importRSAPublicKeyHex","rsaEncrypt","sha256","aesGcmEncrypt","arrayBufferToHex","arrayBufferToBase64","hexToArrayBuffer","jsxDEV","_jsxDEV","EncryptForm","_s","publicKeyHex","setPublicKeyHex","localStorage","getItem","fileName","setFileName","status","setStatus","fileInputRef","handleSavePublic","setItem","handleEncryptAndUpload","e","preventDefault","file","current","files","name","arrayBuffer","digest","fileBytes","Uint8Array","digestBytes","payload","length","set","aesKey","aesRaw","ciphertext","iv","buffer","pub","encryptedAES","ciphertextBase64","encryptedAESHex","ivHex","fileHashHex","binary","atob","len","u8","i","charCodeAt","blob","Blob","type","formData","FormData","append","metadata","filename","originalFilename","encryptedAESKeyHex","JSON","stringify","resp","fetch","method","body","j","json","ok","Error","error","id","err","console","message","style","border","padding","borderRadius","children","_jsxFileName","lineNumber","columnNumber","rows","value","onChange","target","trim","placeholder","width","fontFamily","marginTop","onClick","onSubmit","ref","fontSize","color","_c","$RefreshReg$"],"sources":["C:/Users/new/secure-file-vault/client/src/components/EncryptForm.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport {\r\n  generateAESKey,\r\n  exportAESRaw,\r\n  importRSAPublicKeyHex,\r\n  rsaEncrypt,\r\n  sha256,\r\n  aesGcmEncrypt,\r\n  arrayBufferToHex,\r\n  arrayBufferToBase64,\r\n  hexToArrayBuffer\r\n} from '../utils/crypto';\r\n\r\nexport default function EncryptForm() {\r\n  const [publicKeyHex, setPublicKeyHex] = useState(localStorage.getItem('publicKeyHex') || '');\r\n  const [fileName, setFileName] = useState('');\r\n  const [status, setStatus] = useState('');\r\n  const fileInputRef = useRef();\r\n\r\n  const handleSavePublic = () => {\r\n    localStorage.setItem('publicKeyHex', publicKeyHex);\r\n    setStatus('Saved public key to localStorage (only public key).');\r\n  };\r\n\r\n  async function handleEncryptAndUpload(e) {\r\n    e.preventDefault();\r\n    setStatus('Processing...');\r\n    try {\r\n      const file = fileInputRef.current.files[0];\r\n      if (!file) { setStatus('No file selected'); return; }\r\n      if (!publicKeyHex) { setStatus('Provide public key HEX'); return; }\r\n\r\n      setFileName(file.name);\r\n      const arrayBuffer = await file.arrayBuffer();\r\n\r\n      // 1) compute SHA-256 digest of the file\r\n      const digest = await sha256(arrayBuffer);\r\n\r\n      // 2) create payload = file bytes || digest (concatenate)\r\n      const fileBytes = new Uint8Array(arrayBuffer);\r\n      const digestBytes = new Uint8Array(digest);\r\n      const payload = new Uint8Array(fileBytes.length + digestBytes.length);\r\n      payload.set(fileBytes, 0);\r\n      payload.set(digestBytes, fileBytes.length);\r\n\r\n      // 3) generate AES-256-GCM key\r\n      const aesKey = await generateAESKey();\r\n      const aesRaw = await exportAESRaw(aesKey);\r\n\r\n      // 4) AES-GCM encrypt the payload\r\n      const { ciphertext, iv } = await aesGcmEncrypt(aesKey, payload.buffer);\r\n\r\n      // 5) import RSA public key (user provided HEX)\r\n      const pub = await importRSAPublicKeyHex(publicKeyHex);\r\n\r\n      // 6) encrypt raw AES key with RSA-OAEP\r\n      const encryptedAES = await rsaEncrypt(pub, aesRaw);\r\n\r\n      // 7) prepare upload: file blob (ciphertext) and metadata\r\n      const ciphertextBase64 = arrayBufferToBase64(ciphertext);\r\n      const encryptedAESHex = arrayBufferToHex(encryptedAES);\r\n      const ivHex = arrayBufferToHex(iv.buffer);\r\n      const fileHashHex = arrayBufferToHex(digest.buffer);\r\n\r\n      // send to server as multipart/form-data\r\n      // convert base64 ciphertext to Blob\r\n      const binary = atob(ciphertextBase64);\r\n      const len = binary.length;\r\n      const u8 = new Uint8Array(len);\r\n      for (let i = 0; i < len; i++) u8[i] = binary.charCodeAt(i);\r\n      const blob = new Blob([u8], { type: 'application/octet-stream' });\r\n\r\n      const formData = new FormData();\r\n      formData.append('file', blob, `${file.name}.enc`);\r\n      const metadata = {\r\n        filename: `${file.name}.enc`,\r\n        originalFilename: file.name,\r\n        encryptedAESKeyHex: encryptedAESHex,\r\n        ivHex,\r\n        fileHashHex\r\n      };\r\n      formData.append('metadata', JSON.stringify(metadata));\r\n\r\n      // POST to server (assumes server at localhost:4000)\r\n      setStatus('Uploading encrypted blob to server...');\r\n      const resp = await fetch('http://localhost:4000/upload', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      const j = await resp.json();\r\n      if (!resp.ok) throw new Error(j.error || 'Upload failed');\r\n      setStatus(`Upload success â€” file id: ${j.id}`);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setStatus('Error: ' + err.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ border: '1px solid #ddd', padding: 16, borderRadius: 8 }}>\r\n      <h2>Encrypt & Upload</h2>\r\n      <p>Paste recipient's RSA public key (HEX of SPKI DER). You may save the public key to localStorage.</p>\r\n      <textarea\r\n        rows={4}\r\n        value={publicKeyHex}\r\n        onChange={(e) => setPublicKeyHex(e.target.value.trim())}\r\n        placeholder=\"Paste public key HEX (SPKI DER) here\"\r\n        style={{ width: '100%', fontFamily: 'monospace' }}\r\n      />\r\n      <div style={{ marginTop: 8 }}>\r\n        <button onClick={handleSavePublic}>Save Public Key (localStorage)</button>\r\n      </div>\r\n\r\n      <form onSubmit={handleEncryptAndUpload} style={{ marginTop: 12 }}>\r\n        <input ref={fileInputRef} type=\"file\" />\r\n        <div style={{ marginTop: 8 }}>\r\n          <button type=\"submit\">Encrypt & Upload</button>\r\n        </div>\r\n      </form>\r\n\r\n      <div style={{ marginTop: 12 }}>\r\n        <strong>Status:</strong> {status}\r\n      </div>\r\n      <div style={{ marginTop: 8, fontSize: 13, color: '#555' }}>\r\n        <p><strong>Important:</strong></p>\r\n        <ul>\r\n          <li>Private key must never be saved to server or localStorage.</li>\r\n          <li>The server only stores the encrypted file blob and metadata (including the RSA-encrypted AES key in HEX).</li>\r\n          <li>When you want to decrypt, provide the private key HEX in the Decrypt section.</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}