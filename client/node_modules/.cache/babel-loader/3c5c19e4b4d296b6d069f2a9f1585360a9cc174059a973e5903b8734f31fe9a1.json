{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\new\\\\secure-file-vault\\\\client\\\\src\\\\components\\\\DecryptForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { generateAESKey, exportAESRaw, importAESRaw, importRSAPublicKeyBase64,\n// <-- add this\nrsaEncrypt, aesGcmEncrypt, arrayBufferToBase64 } from './crypto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DecryptForm() {\n  _s();\n  const [privateKeyHex, setPrivateKeyHex] = useState('');\n  const [fileId, setFileId] = useState('');\n  const [status, setStatus] = useState('');\n  const [downloadUrl, setDownloadUrl] = useState(null);\n\n  // Fetch file from server: GET /file/:id which returns X-Metadata header (base64) and file blob\n  async function handleFetchAndDecrypt(e) {\n    e.preventDefault();\n    setStatus('Fetching file from server...');\n    setDownloadUrl(null);\n    try {\n      if (!privateKeyHex) {\n        setStatus('Provide private key HEX (PKCS8 DER)');\n        return;\n      }\n      if (!fileId) {\n        setStatus('Provide file id');\n        return;\n      }\n      const resp = await fetch(`http://localhost:4000/file/${fileId}`);\n      if (!resp.ok) {\n        const j = await resp.json().catch(() => ({}));\n        throw new Error(j.error || 'Fetch failed');\n      }\n\n      // metadata comes in X-Metadata header (base64 encoded)\n      const metaB64 = resp.headers.get('x-metadata');\n      if (!metaB64) throw new Error('Missing metadata header');\n      const metaJson = JSON.parse(atob(metaB64));\n      const encryptedAESKeyHex = metaJson.encryptedAESKeyHex;\n      const ivHex = metaJson.ivHex;\n\n      // get blob (ciphertext)\n      const blob = await resp.blob();\n      const ciphertextArrayBuffer = await blob.arrayBuffer();\n      setStatus('Importing private key...');\n      const priv = await importRSAPrivateKeyHex(privateKeyHex.trim());\n      setStatus('Decrypting AES key with RSA private key...');\n      const encryptedAESBuffer = hexToArrayBuffer(encryptedAESKeyHex);\n      const rawAes = await rsaDecrypt(priv, encryptedAESBuffer);\n      setStatus('Importing AES key...');\n      const aesKey = await importAESRaw(rawAes);\n\n      // iv\n      const ivBuf = hexToArrayBuffer(ivHex);\n      const ivUint8 = new Uint8Array(ivBuf);\n      setStatus('Decrypting file (AES-GCM)...');\n      const decrypted = await aesGcmDecrypt(aesKey, ivUint8, ciphertextArrayBuffer);\n\n      // decrypted is payload = original file bytes || digest\n      // split last 32 bytes as SHA-256 digest\n      const decU8 = new Uint8Array(decrypted);\n      if (decU8.length < 32) throw new Error('Decrypted payload too small');\n      const originalBytes = decU8.slice(0, decU8.length - 32);\n      const digestBytes = decU8.slice(decU8.length - 32);\n\n      // verify digest\n      const computedDigest = new Uint8Array(await crypto.subtle.digest('SHA-256', originalBytes));\n      let ok = true;\n      for (let i = 0; i < 32; i++) if (computedDigest[i] !== digestBytes[i]) {\n        ok = false;\n        break;\n      }\n      if (!ok) {\n        setStatus('WARNING: Hash verification failed — file integrity check failed!');\n        return;\n      }\n      setStatus('Success: integrity verified. Preparing download...');\n      const blobOut = new Blob([originalBytes], {\n        type: 'application/octet-stream'\n      });\n      const url = URL.createObjectURL(blobOut);\n      setDownloadUrl({\n        url,\n        filename: metaJson.originalFilename || 'decrypted.file'\n      });\n      setStatus('Decryption done — click download link.');\n    } catch (err) {\n      console.error(err);\n      setStatus('Error: ' + err.message);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: '1px solid #ddd',\n      padding: 16,\n      borderRadius: 8\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Download & Decrypt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Provide file id (from upload response) and your RSA private key (HEX of PKCS8 DER).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"File ID: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: fileId,\n        onChange: e => setFileId(e.target.value),\n        style: {\n          width: 300\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8\n      },\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: 6,\n        value: privateKeyHex,\n        onChange: e => setPrivateKeyHex(e.target.value.trim()),\n        placeholder: \"Paste private key HEX (PKCS8 DER) here\",\n        style: {\n          width: '100%',\n          fontFamily: 'monospace'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFetchAndDecrypt,\n        children: \"Fetch & Decrypt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 12\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), \" \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), downloadUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 12\n      },\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: downloadUrl.url,\n        download: downloadUrl.filename,\n        children: [\"Download decrypted file (\", downloadUrl.filename, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(DecryptForm, \"IxrS9m8t70WhceC66VpHkXQj+Cw=\");\n_c = DecryptForm;\nvar _c;\n$RefreshReg$(_c, \"DecryptForm\");","map":{"version":3,"names":["React","useState","generateAESKey","exportAESRaw","importAESRaw","importRSAPublicKeyBase64","rsaEncrypt","aesGcmEncrypt","arrayBufferToBase64","jsxDEV","_jsxDEV","DecryptForm","_s","privateKeyHex","setPrivateKeyHex","fileId","setFileId","status","setStatus","downloadUrl","setDownloadUrl","handleFetchAndDecrypt","e","preventDefault","resp","fetch","ok","j","json","catch","Error","error","metaB64","headers","get","metaJson","JSON","parse","atob","encryptedAESKeyHex","ivHex","blob","ciphertextArrayBuffer","arrayBuffer","priv","importRSAPrivateKeyHex","trim","encryptedAESBuffer","hexToArrayBuffer","rawAes","rsaDecrypt","aesKey","ivBuf","ivUint8","Uint8Array","decrypted","aesGcmDecrypt","decU8","length","originalBytes","slice","digestBytes","computedDigest","crypto","subtle","digest","i","blobOut","Blob","type","url","URL","createObjectURL","filename","originalFilename","err","console","message","style","border","padding","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","width","marginTop","rows","placeholder","fontFamily","onClick","href","download","_c","$RefreshReg$"],"sources":["C:/Users/new/secure-file-vault/client/src/components/DecryptForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  generateAESKey,\r\n  exportAESRaw,\r\n  importAESRaw,\r\n  importRSAPublicKeyBase64,   // <-- add this\r\n  rsaEncrypt,\r\n  aesGcmEncrypt,\r\n  arrayBufferToBase64\r\n} from './crypto';\r\n\r\nexport default function DecryptForm() {\r\n  const [privateKeyHex, setPrivateKeyHex] = useState('');\r\n  const [fileId, setFileId] = useState('');\r\n  const [status, setStatus] = useState('');\r\n  const [downloadUrl, setDownloadUrl] = useState(null);\r\n\r\n  // Fetch file from server: GET /file/:id which returns X-Metadata header (base64) and file blob\r\n  async function handleFetchAndDecrypt(e) {\r\n    e.preventDefault();\r\n    setStatus('Fetching file from server...');\r\n    setDownloadUrl(null);\r\n    try {\r\n      if (!privateKeyHex) { setStatus('Provide private key HEX (PKCS8 DER)'); return; }\r\n      if (!fileId) { setStatus('Provide file id'); return; }\r\n\r\n      const resp = await fetch(`http://localhost:4000/file/${fileId}`);\r\n      if (!resp.ok) {\r\n        const j = await resp.json().catch(() => ({}));\r\n        throw new Error(j.error || 'Fetch failed');\r\n      }\r\n\r\n      // metadata comes in X-Metadata header (base64 encoded)\r\n      const metaB64 = resp.headers.get('x-metadata');\r\n      if (!metaB64) throw new Error('Missing metadata header');\r\n      const metaJson = JSON.parse(atob(metaB64));\r\n      const encryptedAESKeyHex = metaJson.encryptedAESKeyHex;\r\n      const ivHex = metaJson.ivHex;\r\n\r\n      // get blob (ciphertext)\r\n      const blob = await resp.blob();\r\n      const ciphertextArrayBuffer = await blob.arrayBuffer();\r\n\r\n      setStatus('Importing private key...');\r\n      const priv = await importRSAPrivateKeyHex(privateKeyHex.trim());\r\n\r\n      setStatus('Decrypting AES key with RSA private key...');\r\n      const encryptedAESBuffer = hexToArrayBuffer(encryptedAESKeyHex);\r\n      const rawAes = await rsaDecrypt(priv, encryptedAESBuffer);\r\n\r\n      setStatus('Importing AES key...');\r\n      const aesKey = await importAESRaw(rawAes);\r\n\r\n      // iv\r\n      const ivBuf = hexToArrayBuffer(ivHex);\r\n      const ivUint8 = new Uint8Array(ivBuf);\r\n\r\n      setStatus('Decrypting file (AES-GCM)...');\r\n      const decrypted = await aesGcmDecrypt(aesKey, ivUint8, ciphertextArrayBuffer);\r\n\r\n      // decrypted is payload = original file bytes || digest\r\n      // split last 32 bytes as SHA-256 digest\r\n      const decU8 = new Uint8Array(decrypted);\r\n      if (decU8.length < 32) throw new Error('Decrypted payload too small');\r\n      const originalBytes = decU8.slice(0, decU8.length - 32);\r\n      const digestBytes = decU8.slice(decU8.length - 32);\r\n\r\n      // verify digest\r\n      const computedDigest = new Uint8Array(await crypto.subtle.digest('SHA-256', originalBytes));\r\n      let ok = true;\r\n      for (let i = 0; i < 32; i++) if (computedDigest[i] !== digestBytes[i]) { ok = false; break; }\r\n\r\n      if (!ok) {\r\n        setStatus('WARNING: Hash verification failed — file integrity check failed!');\r\n        return;\r\n      }\r\n\r\n      setStatus('Success: integrity verified. Preparing download...');\r\n      const blobOut = new Blob([originalBytes], { type: 'application/octet-stream' });\r\n      const url = URL.createObjectURL(blobOut);\r\n      setDownloadUrl({ url, filename: metaJson.originalFilename || 'decrypted.file' });\r\n      setStatus('Decryption done — click download link.');\r\n    } catch (err) {\r\n      console.error(err);\r\n      setStatus('Error: ' + err.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ border: '1px solid #ddd', padding: 16, borderRadius: 8 }}>\r\n      <h2>Download & Decrypt</h2>\r\n      <p>Provide file id (from upload response) and your RSA private key (HEX of PKCS8 DER).</p>\r\n      <div>\r\n        <label>File ID: </label>\r\n        <input value={fileId} onChange={e => setFileId(e.target.value)} style={{ width: 300 }} />\r\n      </div>\r\n      <div style={{ marginTop: 8 }}>\r\n        <textarea\r\n          rows={6}\r\n          value={privateKeyHex}\r\n          onChange={e => setPrivateKeyHex(e.target.value.trim())}\r\n          placeholder=\"Paste private key HEX (PKCS8 DER) here\"\r\n          style={{ width: '100%', fontFamily: 'monospace' }}\r\n        />\r\n      </div>\r\n      <div style={{ marginTop: 8 }}>\r\n        <button onClick={handleFetchAndDecrypt}>Fetch & Decrypt</button>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 12 }}>\r\n        <strong>Status:</strong> {status}\r\n      </div>\r\n\r\n      {downloadUrl && (\r\n        <div style={{ marginTop: 12 }}>\r\n          <a href={downloadUrl.url} download={downloadUrl.filename}>Download decrypted file ({downloadUrl.filename})</a>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,cAAc,EACdC,YAAY,EACZC,YAAY,EACZC,wBAAwB;AAAI;AAC5BC,UAAU,EACVC,aAAa,EACbC,mBAAmB,QACd,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElB,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACA,eAAeoB,qBAAqBA,CAACC,CAAC,EAAE;IACtCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBL,SAAS,CAAC,8BAA8B,CAAC;IACzCE,cAAc,CAAC,IAAI,CAAC;IACpB,IAAI;MACF,IAAI,CAACP,aAAa,EAAE;QAAEK,SAAS,CAAC,qCAAqC,CAAC;QAAE;MAAQ;MAChF,IAAI,CAACH,MAAM,EAAE;QAAEG,SAAS,CAAC,iBAAiB,CAAC;QAAE;MAAQ;MAErD,MAAMM,IAAI,GAAG,MAAMC,KAAK,CAAC,8BAA8BV,MAAM,EAAE,CAAC;MAChE,IAAI,CAACS,IAAI,CAACE,EAAE,EAAE;QACZ,MAAMC,CAAC,GAAG,MAAMH,IAAI,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,IAAIC,KAAK,CAACH,CAAC,CAACI,KAAK,IAAI,cAAc,CAAC;MAC5C;;MAEA;MACA,MAAMC,OAAO,GAAGR,IAAI,CAACS,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MAC9C,IAAI,CAACF,OAAO,EAAE,MAAM,IAAIF,KAAK,CAAC,yBAAyB,CAAC;MACxD,MAAMK,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,OAAO,CAAC,CAAC;MAC1C,MAAMO,kBAAkB,GAAGJ,QAAQ,CAACI,kBAAkB;MACtD,MAAMC,KAAK,GAAGL,QAAQ,CAACK,KAAK;;MAE5B;MACA,MAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACiB,IAAI,CAAC,CAAC;MAC9B,MAAMC,qBAAqB,GAAG,MAAMD,IAAI,CAACE,WAAW,CAAC,CAAC;MAEtDzB,SAAS,CAAC,0BAA0B,CAAC;MACrC,MAAM0B,IAAI,GAAG,MAAMC,sBAAsB,CAAChC,aAAa,CAACiC,IAAI,CAAC,CAAC,CAAC;MAE/D5B,SAAS,CAAC,4CAA4C,CAAC;MACvD,MAAM6B,kBAAkB,GAAGC,gBAAgB,CAACT,kBAAkB,CAAC;MAC/D,MAAMU,MAAM,GAAG,MAAMC,UAAU,CAACN,IAAI,EAAEG,kBAAkB,CAAC;MAEzD7B,SAAS,CAAC,sBAAsB,CAAC;MACjC,MAAMiC,MAAM,GAAG,MAAM/C,YAAY,CAAC6C,MAAM,CAAC;;MAEzC;MACA,MAAMG,KAAK,GAAGJ,gBAAgB,CAACR,KAAK,CAAC;MACrC,MAAMa,OAAO,GAAG,IAAIC,UAAU,CAACF,KAAK,CAAC;MAErClC,SAAS,CAAC,8BAA8B,CAAC;MACzC,MAAMqC,SAAS,GAAG,MAAMC,aAAa,CAACL,MAAM,EAAEE,OAAO,EAAEX,qBAAqB,CAAC;;MAE7E;MACA;MACA,MAAMe,KAAK,GAAG,IAAIH,UAAU,CAACC,SAAS,CAAC;MACvC,IAAIE,KAAK,CAACC,MAAM,GAAG,EAAE,EAAE,MAAM,IAAI5B,KAAK,CAAC,6BAA6B,CAAC;MACrE,MAAM6B,aAAa,GAAGF,KAAK,CAACG,KAAK,CAAC,CAAC,EAAEH,KAAK,CAACC,MAAM,GAAG,EAAE,CAAC;MACvD,MAAMG,WAAW,GAAGJ,KAAK,CAACG,KAAK,CAACH,KAAK,CAACC,MAAM,GAAG,EAAE,CAAC;;MAElD;MACA,MAAMI,cAAc,GAAG,IAAIR,UAAU,CAAC,MAAMS,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC,SAAS,EAAEN,aAAa,CAAC,CAAC;MAC3F,IAAIjC,EAAE,GAAG,IAAI;MACb,KAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE,IAAIJ,cAAc,CAACI,CAAC,CAAC,KAAKL,WAAW,CAACK,CAAC,CAAC,EAAE;QAAExC,EAAE,GAAG,KAAK;QAAE;MAAO;MAE5F,IAAI,CAACA,EAAE,EAAE;QACPR,SAAS,CAAC,kEAAkE,CAAC;QAC7E;MACF;MAEAA,SAAS,CAAC,oDAAoD,CAAC;MAC/D,MAAMiD,OAAO,GAAG,IAAIC,IAAI,CAAC,CAACT,aAAa,CAAC,EAAE;QAAEU,IAAI,EAAE;MAA2B,CAAC,CAAC;MAC/E,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACL,OAAO,CAAC;MACxC/C,cAAc,CAAC;QAAEkD,GAAG;QAAEG,QAAQ,EAAEtC,QAAQ,CAACuC,gBAAgB,IAAI;MAAiB,CAAC,CAAC;MAChFxD,SAAS,CAAC,wCAAwC,CAAC;IACrD,CAAC,CAAC,OAAOyD,GAAG,EAAE;MACZC,OAAO,CAAC7C,KAAK,CAAC4C,GAAG,CAAC;MAClBzD,SAAS,CAAC,SAAS,GAAGyD,GAAG,CAACE,OAAO,CAAC;IACpC;EACF;EAEA,oBACEnE,OAAA;IAAKoE,KAAK,EAAE;MAAEC,MAAM,EAAE,gBAAgB;MAAEC,OAAO,EAAE,EAAE;MAAEC,YAAY,EAAE;IAAE,CAAE;IAAAC,QAAA,gBACrExE,OAAA;MAAAwE,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3B5E,OAAA;MAAAwE,QAAA,EAAG;IAAmF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC1F5E,OAAA;MAAAwE,QAAA,gBACExE,OAAA;QAAAwE,QAAA,EAAO;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACxB5E,OAAA;QAAO6E,KAAK,EAAExE,MAAO;QAACyE,QAAQ,EAAElE,CAAC,IAAIN,SAAS,CAACM,CAAC,CAACmE,MAAM,CAACF,KAAK,CAAE;QAACT,KAAK,EAAE;UAAEY,KAAK,EAAE;QAAI;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtF,CAAC,eACN5E,OAAA;MAAKoE,KAAK,EAAE;QAAEa,SAAS,EAAE;MAAE,CAAE;MAAAT,QAAA,eAC3BxE,OAAA;QACEkF,IAAI,EAAE,CAAE;QACRL,KAAK,EAAE1E,aAAc;QACrB2E,QAAQ,EAAElE,CAAC,IAAIR,gBAAgB,CAACQ,CAAC,CAACmE,MAAM,CAACF,KAAK,CAACzC,IAAI,CAAC,CAAC,CAAE;QACvD+C,WAAW,EAAC,wCAAwC;QACpDf,KAAK,EAAE;UAAEY,KAAK,EAAE,MAAM;UAAEI,UAAU,EAAE;QAAY;MAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN5E,OAAA;MAAKoE,KAAK,EAAE;QAAEa,SAAS,EAAE;MAAE,CAAE;MAAAT,QAAA,eAC3BxE,OAAA;QAAQqF,OAAO,EAAE1E,qBAAsB;QAAA6D,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D,CAAC,eAEN5E,OAAA;MAAKoE,KAAK,EAAE;QAAEa,SAAS,EAAE;MAAG,CAAE;MAAAT,QAAA,gBAC5BxE,OAAA;QAAAwE,QAAA,EAAQ;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC,EAACrE,MAAM;IAAA;MAAAkE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,EAELnE,WAAW,iBACVT,OAAA;MAAKoE,KAAK,EAAE;QAAEa,SAAS,EAAE;MAAG,CAAE;MAAAT,QAAA,eAC5BxE,OAAA;QAAGsF,IAAI,EAAE7E,WAAW,CAACmD,GAAI;QAAC2B,QAAQ,EAAE9E,WAAW,CAACsD,QAAS;QAAAS,QAAA,GAAC,2BAAyB,EAAC/D,WAAW,CAACsD,QAAQ,EAAC,GAAC;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3G,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC1E,EAAA,CA7GuBD,WAAW;AAAAuF,EAAA,GAAXvF,WAAW;AAAA,IAAAuF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}