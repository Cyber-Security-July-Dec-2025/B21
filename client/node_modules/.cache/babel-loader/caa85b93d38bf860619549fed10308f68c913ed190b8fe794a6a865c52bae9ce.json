{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\new\\\\secure-file-vault\\\\client\\\\src\\\\components\\\\EncryptForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { generateAESKey, exportAESRaw, importRSAPublicKeyHex, rsaEncrypt, sha256, aesGcmEncrypt, arrayBufferToHex, arrayBufferToBase64, hexToArrayBuffer } from '../utils/crypto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EncryptForm() {\n  _s();\n  const [publicKeyHex, setPublicKeyHex] = useState(localStorage.getItem('publicKeyHex') || '');\n  const [fileName, setFileName] = useState('');\n  const [status, setStatus] = useState('');\n  const fileInputRef = useRef();\n  const handleSavePublic = () => {\n    localStorage.setItem('publicKeyHex', publicKeyHex);\n    setStatus('Saved public key to localStorage (only public key).');\n  };\n  async function handleEncryptAndUpload(e) {\n    e.preventDefault();\n    setStatus('Processing...');\n    console.log(\"=== [CLIENT] Encryption Flow Started ===\");\n    try {\n      const file = fileInputRef.current.files[0];\n      if (!file) {\n        setStatus('No file selected');\n        console.warn(\"[CLIENT] No file selected\");\n        return;\n      }\n      if (!publicKeyHex) {\n        setStatus('Provide public key HEX');\n        console.warn(\"[CLIENT] No public key provided\");\n        return;\n      }\n      setFileName(file.name);\n      console.log(\"[CLIENT] Selected file:\", file.name, \"size:\", file.size);\n      const arrayBuffer = await file.arrayBuffer();\n      console.log(\"[CLIENT] File read as ArrayBuffer, length:\", arrayBuffer.byteLength);\n\n      // 1) compute SHA-256 digest of the file\n      const digest = await sha256(arrayBuffer);\n      console.log(\"[CLIENT] SHA-256 digest computed, length:\", digest.byteLength);\n\n      // 2) create payload = file bytes || digest\n      const fileBytes = new Uint8Array(arrayBuffer);\n      const digestBytes = new Uint8Array(digest);\n      const payload = new Uint8Array(fileBytes.length + digestBytes.length);\n      payload.set(fileBytes, 0);\n      payload.set(digestBytes, fileBytes.length);\n      console.log(\"[CLIENT] Payload created, length:\", payload.length);\n\n      // 3) generate AES-256-GCM key\n      const aesKey = await generateAESKey();\n      console.log(\"[CLIENT] AES key generated:\", aesKey);\n      const aesRaw = await exportAESRaw(aesKey);\n      console.log(\"[CLIENT] AES raw key length:\", aesRaw.byteLength);\n\n      // 4) AES-GCM encrypt the payload\n      console.log(\"[CLIENT] Starting AES-GCM encryption...\");\n      const {\n        ciphertext,\n        iv\n      } = await aesGcmEncrypt(aesKey, payload.buffer);\n      console.log(\"[CLIENT] AES-GCM encryption complete, ciphertext length:\", ciphertext.byteLength);\n      console.log(\"[CLIENT] AES-GCM IV length:\", iv.byteLength, \"IV (hex):\", arrayBufferToHex(iv.buffer));\n\n      // 5) import RSA public key\n      console.log(\"[CLIENT] Importing RSA public key...\");\n      const pub = await importRSAPublicKeyHex(publicKeyHex);\n      console.log(\"[CLIENT] RSA public key imported:\", pub);\n\n      // 6) encrypt raw AES key with RSA-OAEP\n      console.log(\"[CLIENT] Encrypting AES key with RSA-OAEP...\");\n      const encryptedAES = await rsaEncrypt(pub, aesRaw);\n      console.log(\"[CLIENT] AES key encrypted with RSA, length:\", encryptedAES.byteLength);\n\n      // 7) prepare upload\n      const ciphertextBase64 = arrayBufferToBase64(ciphertext);\n      const encryptedAESHex = arrayBufferToHex(encryptedAES);\n      const ivHex = arrayBufferToHex(iv.buffer);\n      const fileHashHex = arrayBufferToHex(digest.buffer);\n      console.log(\"[CLIENT] Metadata prepared:\", {\n        filename: `${file.name}.enc`,\n        originalFilename: file.name,\n        encryptedAESKeyHex: encryptedAESHex.slice(0, 32) + \"...\",\n        ivHex,\n        fileHashHex\n      });\n\n      // convert base64 ciphertext to Blob\n      const binary = atob(ciphertextBase64);\n      const len = binary.length;\n      const u8 = new Uint8Array(len);\n      for (let i = 0; i < len; i++) u8[i] = binary.charCodeAt(i);\n      const blob = new Blob([u8], {\n        type: 'application/octet-stream'\n      });\n      const formData = new FormData();\n      formData.append('file', blob, `${file.name}.enc`);\n      const metadata = {\n        filename: `${file.name}.enc`,\n        originalFilename: file.name,\n        encryptedAESKeyHex: encryptedAESHex,\n        ivHex,\n        fileHashHex\n      };\n      formData.append('metadata', JSON.stringify(metadata));\n\n      // POST to server\n      setStatus('Uploading encrypted blob to server...');\n      console.log(\"[CLIENT] Uploading to http://localhost:4000/upload ...\");\n      const resp = await fetch('http://localhost:4000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const j = await resp.json();\n      if (!resp.ok) throw new Error(j.error || 'Upload failed');\n      setStatus(`Upload success — file id: ${j.id}`);\n      console.log(\"[CLIENT] Upload success — response:\", j);\n    } catch (err) {\n      console.error(\"[CLIENT] ERROR:\", err);\n      setStatus('Error: ' + err.message);\n    }\n    console.log(\"=== [CLIENT] Encryption Flow Finished ===\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: '1px solid #ddd',\n      padding: 16,\n      borderRadius: 8\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Encrypt & Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Paste recipient's RSA public key (HEX of SPKI DER). You may save the public key to localStorage.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: 4,\n      value: publicKeyHex,\n      onChange: e => setPublicKeyHex(e.target.value.trim()),\n      placeholder: \"Paste public key HEX (SPKI DER) here\",\n      style: {\n        width: '100%',\n        fontFamily: 'monospace'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSavePublic,\n        children: \"Save Public Key (localStorage)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleEncryptAndUpload,\n      style: {\n        marginTop: 12\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: fileInputRef,\n        type: \"file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 8\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Encrypt & Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 12\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), \" \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8,\n        fontSize: 13,\n        color: '#555'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Important:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Private key must never be saved to server or localStorage.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"The server only stores the encrypted file blob and metadata (including the RSA-encrypted AES key in HEX).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"When you want to decrypt, provide the private key HEX in the Decrypt section.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(EncryptForm, \"eyX7C6ZYm1MgsjpKIpG2TEJIvu4=\");\n_c = EncryptForm;\nvar _c;\n$RefreshReg$(_c, \"EncryptForm\");","map":{"version":3,"names":["React","useState","useRef","generateAESKey","exportAESRaw","importRSAPublicKeyHex","rsaEncrypt","sha256","aesGcmEncrypt","arrayBufferToHex","arrayBufferToBase64","hexToArrayBuffer","jsxDEV","_jsxDEV","EncryptForm","_s","publicKeyHex","setPublicKeyHex","localStorage","getItem","fileName","setFileName","status","setStatus","fileInputRef","handleSavePublic","setItem","handleEncryptAndUpload","e","preventDefault","console","log","file","current","files","warn","name","size","arrayBuffer","byteLength","digest","fileBytes","Uint8Array","digestBytes","payload","length","set","aesKey","aesRaw","ciphertext","iv","buffer","pub","encryptedAES","ciphertextBase64","encryptedAESHex","ivHex","fileHashHex","filename","originalFilename","encryptedAESKeyHex","slice","binary","atob","len","u8","i","charCodeAt","blob","Blob","type","formData","FormData","append","metadata","JSON","stringify","resp","fetch","method","body","j","json","ok","Error","error","id","err","message","style","border","padding","borderRadius","children","_jsxFileName","lineNumber","columnNumber","rows","value","onChange","target","trim","placeholder","width","fontFamily","marginTop","onClick","onSubmit","ref","fontSize","color","_c","$RefreshReg$"],"sources":["C:/Users/new/secure-file-vault/client/src/components/EncryptForm.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport {\r\n  generateAESKey,\r\n  exportAESRaw,\r\n  importRSAPublicKeyHex,\r\n  rsaEncrypt,\r\n  sha256,\r\n  aesGcmEncrypt,\r\n  arrayBufferToHex,\r\n  arrayBufferToBase64,\r\n  hexToArrayBuffer\r\n} from '../utils/crypto';\r\n\r\nexport default function EncryptForm() {\r\n  const [publicKeyHex, setPublicKeyHex] = useState(localStorage.getItem('publicKeyHex') || '');\r\n  const [fileName, setFileName] = useState('');\r\n  const [status, setStatus] = useState('');\r\n  const fileInputRef = useRef();\r\n\r\n  const handleSavePublic = () => {\r\n    localStorage.setItem('publicKeyHex', publicKeyHex);\r\n    setStatus('Saved public key to localStorage (only public key).');\r\n  };\r\n\r\n  async function handleEncryptAndUpload(e) {\r\n    e.preventDefault();\r\n    setStatus('Processing...');\r\n    console.log(\"=== [CLIENT] Encryption Flow Started ===\");\r\n    try {\r\n      const file = fileInputRef.current.files[0];\r\n      if (!file) { \r\n        setStatus('No file selected'); \r\n        console.warn(\"[CLIENT] No file selected\");\r\n        return; \r\n      }\r\n      if (!publicKeyHex) { \r\n        setStatus('Provide public key HEX'); \r\n        console.warn(\"[CLIENT] No public key provided\");\r\n        return; \r\n      }\r\n\r\n      setFileName(file.name);\r\n      console.log(\"[CLIENT] Selected file:\", file.name, \"size:\", file.size);\r\n\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      console.log(\"[CLIENT] File read as ArrayBuffer, length:\", arrayBuffer.byteLength);\r\n\r\n      // 1) compute SHA-256 digest of the file\r\n      const digest = await sha256(arrayBuffer);\r\n      console.log(\"[CLIENT] SHA-256 digest computed, length:\", digest.byteLength);\r\n\r\n      // 2) create payload = file bytes || digest\r\n      const fileBytes = new Uint8Array(arrayBuffer);\r\n      const digestBytes = new Uint8Array(digest);\r\n      const payload = new Uint8Array(fileBytes.length + digestBytes.length);\r\n      payload.set(fileBytes, 0);\r\n      payload.set(digestBytes, fileBytes.length);\r\n      console.log(\"[CLIENT] Payload created, length:\", payload.length);\r\n\r\n      // 3) generate AES-256-GCM key\r\n      const aesKey = await generateAESKey();\r\n      console.log(\"[CLIENT] AES key generated:\", aesKey);\r\n\r\n      const aesRaw = await exportAESRaw(aesKey);\r\n      console.log(\"[CLIENT] AES raw key length:\", aesRaw.byteLength);\r\n\r\n      // 4) AES-GCM encrypt the payload\r\n      console.log(\"[CLIENT] Starting AES-GCM encryption...\");\r\n      const { ciphertext, iv } = await aesGcmEncrypt(aesKey, payload.buffer);\r\n      console.log(\"[CLIENT] AES-GCM encryption complete, ciphertext length:\", ciphertext.byteLength);\r\n      console.log(\"[CLIENT] AES-GCM IV length:\", iv.byteLength, \"IV (hex):\", arrayBufferToHex(iv.buffer));\r\n\r\n      // 5) import RSA public key\r\n      console.log(\"[CLIENT] Importing RSA public key...\");\r\n      const pub = await importRSAPublicKeyHex(publicKeyHex);\r\n      console.log(\"[CLIENT] RSA public key imported:\", pub);\r\n\r\n      // 6) encrypt raw AES key with RSA-OAEP\r\n      console.log(\"[CLIENT] Encrypting AES key with RSA-OAEP...\");\r\n      const encryptedAES = await rsaEncrypt(pub, aesRaw);\r\n      console.log(\"[CLIENT] AES key encrypted with RSA, length:\", encryptedAES.byteLength);\r\n\r\n      // 7) prepare upload\r\n      const ciphertextBase64 = arrayBufferToBase64(ciphertext);\r\n      const encryptedAESHex = arrayBufferToHex(encryptedAES);\r\n      const ivHex = arrayBufferToHex(iv.buffer);\r\n      const fileHashHex = arrayBufferToHex(digest.buffer);\r\n\r\n      console.log(\"[CLIENT] Metadata prepared:\", {\r\n        filename: `${file.name}.enc`,\r\n        originalFilename: file.name,\r\n        encryptedAESKeyHex: encryptedAESHex.slice(0, 32) + \"...\",\r\n        ivHex,\r\n        fileHashHex\r\n      });\r\n\r\n      // convert base64 ciphertext to Blob\r\n      const binary = atob(ciphertextBase64);\r\n      const len = binary.length;\r\n      const u8 = new Uint8Array(len);\r\n      for (let i = 0; i < len; i++) u8[i] = binary.charCodeAt(i);\r\n      const blob = new Blob([u8], { type: 'application/octet-stream' });\r\n\r\n      const formData = new FormData();\r\n      formData.append('file', blob, `${file.name}.enc`);\r\n      const metadata = {\r\n        filename: `${file.name}.enc`,\r\n        originalFilename: file.name,\r\n        encryptedAESKeyHex: encryptedAESHex,\r\n        ivHex,\r\n        fileHashHex\r\n      };\r\n      formData.append('metadata', JSON.stringify(metadata));\r\n\r\n      // POST to server\r\n      setStatus('Uploading encrypted blob to server...');\r\n      console.log(\"[CLIENT] Uploading to http://localhost:4000/upload ...\");\r\n\r\n      const resp = await fetch('http://localhost:4000/upload', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      const j = await resp.json();\r\n      if (!resp.ok) throw new Error(j.error || 'Upload failed');\r\n      setStatus(`Upload success — file id: ${j.id}`);\r\n      console.log(\"[CLIENT] Upload success — response:\", j);\r\n\r\n    } catch (err) {\r\n      console.error(\"[CLIENT] ERROR:\", err);\r\n      setStatus('Error: ' + err.message);\r\n    }\r\n    console.log(\"=== [CLIENT] Encryption Flow Finished ===\");\r\n  }\r\n\r\n  return (\r\n    <div style={{ border: '1px solid #ddd', padding: 16, borderRadius: 8 }}>\r\n      <h2>Encrypt & Upload</h2>\r\n      <p>Paste recipient's RSA public key (HEX of SPKI DER). You may save the public key to localStorage.</p>\r\n      <textarea\r\n        rows={4}\r\n        value={publicKeyHex}\r\n        onChange={(e) => setPublicKeyHex(e.target.value.trim())}\r\n        placeholder=\"Paste public key HEX (SPKI DER) here\"\r\n        style={{ width: '100%', fontFamily: 'monospace' }}\r\n      />\r\n      <div style={{ marginTop: 8 }}>\r\n        <button onClick={handleSavePublic}>Save Public Key (localStorage)</button>\r\n      </div>\r\n\r\n      <form onSubmit={handleEncryptAndUpload} style={{ marginTop: 12 }}>\r\n        <input ref={fileInputRef} type=\"file\" />\r\n        <div style={{ marginTop: 8 }}>\r\n          <button type=\"submit\">Encrypt & Upload</button>\r\n        </div>\r\n      </form>\r\n\r\n      <div style={{ marginTop: 12 }}>\r\n        <strong>Status:</strong> {status}\r\n      </div>\r\n      <div style={{ marginTop: 8, fontSize: 13, color: '#555' }}>\r\n        <p><strong>Important:</strong></p>\r\n        <ul>\r\n          <li>Private key must never be saved to server or localStorage.</li>\r\n          <li>The server only stores the encrypted file blob and metadata (including the RSA-encrypted AES key in HEX).</li>\r\n          <li>When you want to decrypt, provide the private key HEX in the Decrypt section.</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}