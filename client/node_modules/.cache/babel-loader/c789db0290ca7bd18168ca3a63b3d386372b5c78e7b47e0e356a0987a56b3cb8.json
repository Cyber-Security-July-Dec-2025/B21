{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\new\\\\secure-file-vault\\\\client\\\\src\\\\components\\\\DecryptForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { importRSAPrivateKeyBase64,\n// new helper for base64 keys\nrsaDecrypt, importAESRaw, aesGcmDecrypt, base64ToArrayBuffer // helper to convert base64 → ArrayBuffer\n} from '../utils/crypto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DecryptForm() {\n  _s();\n  const [privateKeyBase64, setPrivateKeyBase64] = useState('');\n  const [fileId, setFileId] = useState('');\n  const [status, setStatus] = useState('');\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const handleFetchAndDecrypt = async e => {\n    e.preventDefault();\n    setStatus('Fetching file from server...');\n    setDownloadUrl(null);\n    try {\n      if (!privateKeyBase64) throw new Error('Provide private key (Base64 PKCS8)');\n      if (!fileId) throw new Error('Provide file ID');\n\n      // Fetch file & metadata\n      const resp = await fetch(`http://localhost:4000/file/${fileId}`);\n      if (!resp.ok) {\n        const j = await resp.json().catch(() => ({}));\n        throw new Error(j.error || 'Fetch failed');\n      }\n      const metaB64 = resp.headers.get('x-metadata');\n      if (!metaB64) throw new Error('Missing metadata header');\n      let metaJson;\n      try {\n        metaJson = JSON.parse(atob(metaB64));\n      } catch {\n        throw new Error('Invalid metadata JSON');\n      }\n      const {\n        encryptedAESKeyHex,\n        ivHex,\n        originalFilename\n      } = metaJson;\n      if (!encryptedAESKeyHex || !ivHex) throw new Error('Incomplete metadata');\n      const blob = await resp.blob();\n      const ciphertextBuffer = await blob.arrayBuffer();\n      setStatus('Importing private RSA key (Base64)...');\n      const privateKey = await importRSAPrivateKeyBase64(privateKeyBase64.trim());\n      setStatus('Decrypting AES key with RSA private key...');\n      const encryptedAESBuffer = base64ToArrayBuffer(encryptedAESKeyHex);\n      const aesKeyRaw = await rsaDecrypt(privateKey, encryptedAESBuffer);\n      const aesKey = await importAESRaw(aesKeyRaw);\n      const iv = new Uint8Array(base64ToArrayBuffer(ivHex));\n      setStatus('Decrypting file with AES-GCM...');\n      const decryptedBuffer = await aesGcmDecrypt(aesKey, iv, ciphertextBuffer);\n\n      // Split payload: original + SHA-256 digest\n      const decU8 = new Uint8Array(decryptedBuffer);\n      if (decU8.length < 32) throw new Error('Decrypted payload too small');\n      const originalBytes = decU8.slice(0, decU8.length - 32);\n      const digestBytes = decU8.slice(decU8.length - 32);\n\n      // Verify digest\n      const computedDigest = new Uint8Array(await crypto.subtle.digest('SHA-256', originalBytes));\n      const valid = computedDigest.every((b, i) => b === digestBytes[i]);\n      if (!valid) throw new Error('Hash verification failed — file integrity compromised!');\n      setStatus('Success: integrity verified. Preparing download...');\n      const blobOut = new Blob([originalBytes], {\n        type: 'application/octet-stream'\n      });\n      const url = URL.createObjectURL(blobOut);\n      setDownloadUrl({\n        url,\n        filename: originalFilename || 'decrypted.file'\n      });\n      setStatus('Decryption done — click download link.');\n    } catch (err) {\n      console.error(err);\n      setStatus(`Error: ${err.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: '1px solid #ddd',\n      padding: 16,\n      borderRadius: 8\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Download & Decrypt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Provide file ID and your RSA private key (Base64 PKCS8 format).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"File ID: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: fileId,\n        onChange: e => setFileId(e.target.value.trim()),\n        style: {\n          width: 300\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8\n      },\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: 6,\n        value: privateKeyBase64,\n        onChange: e => setPrivateKeyBase64(e.target.value.trim()),\n        placeholder: \"Paste private key (Base64 PKCS8) here\",\n        style: {\n          width: '100%',\n          fontFamily: 'monospace'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFetchAndDecrypt,\n        children: \"Fetch & Decrypt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 12\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), \" \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), downloadUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 12\n      },\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: downloadUrl.url,\n        download: downloadUrl.filename,\n        children: [\"Download decrypted file (\", downloadUrl.filename, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(DecryptForm, \"BwTD8fQAnuKr7TxCiaZXNApeJ7c=\");\n_c = DecryptForm;\nvar _c;\n$RefreshReg$(_c, \"DecryptForm\");","map":{"version":3,"names":["React","useState","importRSAPrivateKeyBase64","rsaDecrypt","importAESRaw","aesGcmDecrypt","base64ToArrayBuffer","jsxDEV","_jsxDEV","DecryptForm","_s","privateKeyBase64","setPrivateKeyBase64","fileId","setFileId","status","setStatus","downloadUrl","setDownloadUrl","handleFetchAndDecrypt","e","preventDefault","Error","resp","fetch","ok","j","json","catch","error","metaB64","headers","get","metaJson","JSON","parse","atob","encryptedAESKeyHex","ivHex","originalFilename","blob","ciphertextBuffer","arrayBuffer","privateKey","trim","encryptedAESBuffer","aesKeyRaw","aesKey","iv","Uint8Array","decryptedBuffer","decU8","length","originalBytes","slice","digestBytes","computedDigest","crypto","subtle","digest","valid","every","b","i","blobOut","Blob","type","url","URL","createObjectURL","filename","err","console","message","style","border","padding","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","width","marginTop","rows","placeholder","fontFamily","onClick","href","download","_c","$RefreshReg$"],"sources":["C:/Users/new/secure-file-vault/client/src/components/DecryptForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  importRSAPrivateKeyBase64, // new helper for base64 keys\r\n  rsaDecrypt,\r\n  importAESRaw,\r\n  aesGcmDecrypt,\r\n  base64ToArrayBuffer,       // helper to convert base64 → ArrayBuffer\r\n} from '../utils/crypto';\r\n\r\nexport default function DecryptForm() {\r\n  const [privateKeyBase64, setPrivateKeyBase64] = useState('');\r\n  const [fileId, setFileId] = useState('');\r\n  const [status, setStatus] = useState('');\r\n  const [downloadUrl, setDownloadUrl] = useState(null);\r\n\r\n  const handleFetchAndDecrypt = async (e) => {\r\n    e.preventDefault();\r\n    setStatus('Fetching file from server...');\r\n    setDownloadUrl(null);\r\n\r\n    try {\r\n      if (!privateKeyBase64) throw new Error('Provide private key (Base64 PKCS8)');\r\n      if (!fileId) throw new Error('Provide file ID');\r\n\r\n      // Fetch file & metadata\r\n      const resp = await fetch(`http://localhost:4000/file/${fileId}`);\r\n      if (!resp.ok) {\r\n        const j = await resp.json().catch(() => ({}));\r\n        throw new Error(j.error || 'Fetch failed');\r\n      }\r\n\r\n      const metaB64 = resp.headers.get('x-metadata');\r\n      if (!metaB64) throw new Error('Missing metadata header');\r\n\r\n      let metaJson;\r\n      try {\r\n        metaJson = JSON.parse(atob(metaB64));\r\n      } catch {\r\n        throw new Error('Invalid metadata JSON');\r\n      }\r\n\r\n      const { encryptedAESKeyHex, ivHex, originalFilename } = metaJson;\r\n      if (!encryptedAESKeyHex || !ivHex) throw new Error('Incomplete metadata');\r\n\r\n      const blob = await resp.blob();\r\n      const ciphertextBuffer = await blob.arrayBuffer();\r\n\r\n      setStatus('Importing private RSA key (Base64)...');\r\n      const privateKey = await importRSAPrivateKeyBase64(privateKeyBase64.trim());\r\n\r\n      setStatus('Decrypting AES key with RSA private key...');\r\n      const encryptedAESBuffer = base64ToArrayBuffer(encryptedAESKeyHex);\r\n      const aesKeyRaw = await rsaDecrypt(privateKey, encryptedAESBuffer);\r\n      const aesKey = await importAESRaw(aesKeyRaw);\r\n\r\n      const iv = new Uint8Array(base64ToArrayBuffer(ivHex));\r\n\r\n      setStatus('Decrypting file with AES-GCM...');\r\n      const decryptedBuffer = await aesGcmDecrypt(aesKey, iv, ciphertextBuffer);\r\n\r\n      // Split payload: original + SHA-256 digest\r\n      const decU8 = new Uint8Array(decryptedBuffer);\r\n      if (decU8.length < 32) throw new Error('Decrypted payload too small');\r\n\r\n      const originalBytes = decU8.slice(0, decU8.length - 32);\r\n      const digestBytes = decU8.slice(decU8.length - 32);\r\n\r\n      // Verify digest\r\n      const computedDigest = new Uint8Array(await crypto.subtle.digest('SHA-256', originalBytes));\r\n      const valid = computedDigest.every((b, i) => b === digestBytes[i]);\r\n      if (!valid) throw new Error('Hash verification failed — file integrity compromised!');\r\n\r\n      setStatus('Success: integrity verified. Preparing download...');\r\n      const blobOut = new Blob([originalBytes], { type: 'application/octet-stream' });\r\n      const url = URL.createObjectURL(blobOut);\r\n      setDownloadUrl({ url, filename: originalFilename || 'decrypted.file' });\r\n\r\n      setStatus('Decryption done — click download link.');\r\n    } catch (err) {\r\n      console.error(err);\r\n      setStatus(`Error: ${err.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ border: '1px solid #ddd', padding: 16, borderRadius: 8 }}>\r\n      <h2>Download & Decrypt</h2>\r\n      <p>Provide file ID and your RSA private key (Base64 PKCS8 format).</p>\r\n\r\n      <div>\r\n        <label>File ID: </label>\r\n        <input\r\n          value={fileId}\r\n          onChange={(e) => setFileId(e.target.value.trim())}\r\n          style={{ width: 300 }}\r\n        />\r\n      </div>\r\n\r\n      <div style={{ marginTop: 8 }}>\r\n        <textarea\r\n          rows={6}\r\n          value={privateKeyBase64}\r\n          onChange={(e) => setPrivateKeyBase64(e.target.value.trim())}\r\n          placeholder=\"Paste private key (Base64 PKCS8) here\"\r\n          style={{ width: '100%', fontFamily: 'monospace' }}\r\n        />\r\n      </div>\r\n\r\n      <div style={{ marginTop: 8 }}>\r\n        <button onClick={handleFetchAndDecrypt}>Fetch & Decrypt</button>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 12 }}>\r\n        <strong>Status:</strong> {status}\r\n      </div>\r\n\r\n      {downloadUrl && (\r\n        <div style={{ marginTop: 12 }}>\r\n          <a href={downloadUrl.url} download={downloadUrl.filename}>\r\n            Download decrypted file ({downloadUrl.filename})\r\n          </a>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}